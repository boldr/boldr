schema {
  query: Query
  mutation: RootMutation
}

# The URL scalar type represents URL addresses.
scalar URL

# The UUID scalar type represents a UUID.
scalar UUID

# The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
scalar JSON

# The Email scalar type represents E-Mail addresses compliant to RFC 822.
scalar Email

# The DateTime scalar type represents date time strings complying to ISO-8601.
scalar DateTime

# Variations of status for content
enum CONTENT_STATUS {
  PUBLISHED
  ARCHIVED
  DRAFT
}

# An account belonging to a user.
type Account {
  # Unique identifier for the object.
  id: ID!
  # Email address belonging to the account
  email: Email!
  # true if email is verified, false otherwise
  verified: Boolean
  # The ip address of the person performing the reset
  ip: String
  # The reset token
  resetToken: String
  # When the token expires.
  resetTokenExp: DateTime
  # The account verification token
  verificationToken: String
  # When the verification expires.
  verificationTokenExp: DateTime
  # When the account was last logged in to.
  lastLogin: DateTime
  # The timestamp when the object was deleted
  deletedAt: DateTime
  # The timestamp when the object was last updated
  updatedAt: DateTime
  # The timestamp when the object was created
  createdAt: DateTime
  # Roles the account belongs to.
  roles: [Role]
  # Profile belonging to the account.
  profile: Profile
  # Articles the user has written
  articles: [Article]
  # Articles the user has written
  uploads: [Media]
}

type AccountLoginResponse {
  # The JSONWebToken for the user.
  token: String
  # The user who logged in.
  account: Account
  # Any auth related errors.
  errors: [Error]
}

# A query for delivering the maximum amount of content
type AllContent {
  articles: [Article]
  tags: Tag
  entities: Entity
  categories: Category
}

# A blog post or article
type Article {
  # Unique identifier for the object.
  id: ID!
  # The title of the article
  title: String!
  # An alphanumeric identifier for the object unique to its type.
  slug: String
  # html content of the article
  content: String
  # Raw JSON of the article
  rawContent: JSON
  # Short description of the article
  excerpt: String
  # True if the article is featured
  featured: Boolean
  # True if the article is published
  published: Boolean
  # The publishing status of content
  status: CONTENT_STATUS
  # url of the article feature image
  image: String
  # url of the article hero image
  heroImage: String
  # True if the article is published
  authorId: ID
  # The category id
  categoryId: ID
  # The timestamp when the object was deleted
  deletedAt: DateTime
  # The timestamp when the object was last updated
  updatedAt: DateTime
  # The timestamp when the object was created
  createdAt: DateTime
  # Tags relating articles together
  tags: [Tag]
  # Media uploaded with the article
  media: [Media]
  # The account of the person who wrote the article.
  author: Account
  # Category the article belongs to.
  category: Category
}

# A category groups content together
type Category {
  # Unique identifier for the object.
  id: ID!
  # A name for the object.
  name: String
  # An alphanumeric identifier for the object unique to its type.
  slug: String
  # An icon to use for the category
  icon: String
  # A description of the category
  description: String
  # The timestamp when the object was deleted
  deletedAt: DateTime
  # The timestamp when the object was last updated
  updatedAt: DateTime
  # The timestamp when the object was created
  createdAt: DateTime
  # Entities belonging to the category
  entities: [Entity]
  # Articles belonging to the category
  articles: [Article]
}

# A content item
type Entity {
  # Unique identifier for the object.
  id: ID!
  # The title of the entity
  title: String!
  # An alphanumeric identifier for the object unique to its type.
  slug: String
  # html content of the entity
  content: String
  # Raw JSON of the entity
  rawContent: JSON
  # Short description of the entity
  excerpt: String
  meta: JSON
  # The publish status of content
  status: CONTENT_STATUS
  # url of the entity main image
  image: String
  # The id of the creator
  authorId: ID
  # The content type id
  contentTypeId: ID
  # The category id
  categoryId: ID
  # The timestamp when the object was deleted
  deletedAt: DateTime
  # The timestamp when the object was last updated
  updatedAt: DateTime
  # The timestamp when the object was created
  createdAt: DateTime
  # Tags relating articles together
  tags: [Tag]
  contentType: ContentType
  category: Category
  # User who created the entity.
  author: Account
}

type Error {
  # HTTP status code
  code: Int
  # The error message
  message: String
}

type File {
  # Unique identifier for the object.
  id: ID!
  # A name for the object.
  name: String
  # The type of file.
  type: String!
  # The size of the file
  size: Int!
  # The path to the file.
  path: String!
  # The timestamp when the object was deleted
  deletedAt: DateTime
  # The timestamp when the object was last updated
  updatedAt: DateTime
  # The timestamp when the object was created
  createdAt: DateTime
}

# Uploaded images, videos or audio
type Media {
  # Unique identifier for the object.
  id: ID!
  # A name for the object.
  name: String
  # A normalized copy of the object name.
  safeName: String
  # thumbnail filename
  thumbName: String
  # The description of the upload
  fileDescription: String
  # The mime-type of the upload
  type: String
  # The size of the upload
  size: Int
  # The local path where the file is stored
  path: String
  # The relative url to access the file
  url: String
  # The id of the user the file belongs to.
  ownerId: ID
  # The timestamp when the object was last updated
  updatedAt: DateTime
  # The timestamp when the object was created
  createdAt: DateTime
}

# Navigation for the site
type Menu {
  # Unique identifier for the object.
  id: ID!
  # A UUID (Universal Unique Identifier) is a 128-bit number used to uniquely identify some object or entity.
  uuid: UUID
  # A name for the object.
  name: String
  # A normalized copy of the object name.
  safeName: String
  # True if the menu should be hidden from unauth
  restricted: Boolean
  # Links
  details: [MenuDetail]
  # The timestamp when the object was last updated
  updatedAt: DateTime
  # The timestamp when the object was created
  createdAt: DateTime
}

# links and other menu content
type MenuDetail {
  # Unique identifier for the object.
  id: ID!
  # The title text for the menu link
  title: String
  # A normalized copy of the object name.
  safeName: String
  # Custom css classname for the link
  cssClassname: String
  # True if the item has a dropdown
  hasDropdown: Boolean
  # True if the item has is a dropdown item
  isDropdown: Boolean
  # The display order
  order: Int
  # The id of the menu the detail belongs to.
  menuId: ID
  # The id of the menu the detail belongs to.
  parentId: ID
  # The link
  href: String
  # Icon kind
  icon: String
  # The timestamp when the object was deleted
  deletedAt: DateTime
  # The timestamp when the object was last updated
  updatedAt: DateTime
  # The timestamp when the object was created
  createdAt: DateTime
}

# Page of the website
type Page {
  # Unique identifier for the object.
  id: ID!
  # The title of the page
  title: String!
  # An alphanumeric identifier for the object unique to its type.
  slug: String
  # A URL to access the page
  url: String
  # Page meta data
  meta: JSON
  # Page content blocks
  blocks: JSON
  # Page html markup
  markup: String
  # The timestamp when the object was deleted
  deletedAt: DateTime
  # The timestamp when the object was last updated
  updatedAt: DateTime
  # The timestamp when the object was created
  createdAt: DateTime
}

# The profile belonging to an account displays information such as username or a bio.
type Profile {
  # Unique identifier for the object.
  id: ID!
  # The id of the account the profile belongs to.
  accountId: ID
  # The username of the user
  username: String
  # The website of the user
  website: URL
  # The first name of the user
  firstName: String
  # The last name associated with the user
  lastName: String
  # Information about the user
  bio: String
  # The url for an avatar
  avatarUrl: URL
  # A url for an image to use as a profile background.
  profileImage: URL
  # Where the user lives
  location: String
  # Language the user prefers
  language: String
  # When the user was born
  birthday: DateTime
  # The timestamp when the object was deleted
  deletedAt: DateTime
  # The timestamp when the object was last updated
  updatedAt: DateTime
  # The timestamp when the object was created
  createdAt: DateTime
  # Social media profiles.
  socialMedia: Social
}

# Restrict access to content or areas of your site using a role.
type Role {
  # Unique identifier for the object.
  id: ID!
  # A UUID (Universal Unique Identifier) is a 128-bit number used to uniquely identify some object or entity.
  uuid: UUID
  # A name for the object.
  name: String
  # An image for role identification
  image: URL
  # The role description
  description: String
  # Accounts belonging to a role.
  accounts: [Account]
  # The timestamp when the object was deleted
  deletedAt: DateTime
  # The timestamp when the object was last updated
  updatedAt: DateTime
  # The timestamp when the object was created
  createdAt: DateTime
}

# Editable site settings
type Setting {
  # Unique identifier for the object.
  id: ID!
  # The option or setting identifier
  key: String
  # The value of the setting
  value: String
  # A non-normalized key.
  label: String
  # Explaination of what the setting does.
  description: String
}

# Social media portion of a profile for an account.
type Social {
  # Unique identifier for the object.
  id: ID!
  # The id of the profile the social media accounts belong to.
  profileId: ID!
  # Facebook profile url.
  facebookUrl: URL
  # Twitter profile url.
  twitterUrl: URL
  # Google plus profile url.
  googleUrl: URL
  # GitHub profile url.
  githubUrl: URL
  # LinkedIn profile url.
  linkedinUrl: URL
  # Stackoverflow profile url.
  stackoverflowUrl: URL
}

# A tag relates content together
type Tag {
  # Unique identifier for the object.
  id: ID!
  # A name for the object.
  name: String
  # A normalized copy of the object name.
  safeName: String
  # The timestamp when the object was deleted
  deletedAt: DateTime
  # The timestamp when the object was last updated
  updatedAt: DateTime
  # The timestamp when the object was created
  createdAt: DateTime
  # Articles related to the tag
  articles: [Article]
  # Entities related to the tag
  entities: [Entity]
}

# Defines a class of entities.
type ContentType {
  # Unique identifier for the object.
  id: ID!
  # A name for the object.
  name: String
  # An alphanumeric identifier for the object unique to its type.
  slug: String
  # An icon to use for the content type
  icon: String
  # Information regarding what the content type does.
  description: String
  # Entities are instances of content types. For example ContentType of Portfolio would have Projects as entities.
  entities: [Article]
  # The timestamp when the object was deleted
  deletedAt: DateTime
  # The timestamp when the object was last updated
  updatedAt: DateTime
  # The timestamp when the object was created
  createdAt: DateTime
}

input Upload {
  # The file name
  name: String!
  # The type of file.
  type: String!
  # The size of the file
  size: Int!
  # The path to the file.
  path: String!
}

input UploadMediaInput {
  # The file name
  name: String!
  # The type of file.
  type: String!
  # The size of the file
  size: Int!
  # The path to the file.
  path: String!
}

input SettingInput {
  # The setting option
  key: String
  # The value of the setting
  value: String
  # A non-normalized key
  label: String
  # The description for what the setting does.
  description: String
}

input AuthInput {
  # The email address for the account to create or login to.
  email: Email!
  # The password belonging to the account.
  password: String!
}

input CreateArticleInput {
  # The title of the article
  title: String!
  # The slug / normalized article title.
  slug: String
  # html content of the article
  content: String
  # Raw JSON of the article
  rawContent: JSON
  # Short description of the article
  excerpt: String
  # True if the article is featured
  featured: Boolean
  # True if the article is published
  published: Boolean!
  # The publishing status of content
  status: CONTENT_STATUS
  # url of the article feature image
  image: String
  # url of the article background image
  heroImage: String
  # Tags relating articles together
  tags: [String]
  # Id of the category
  categoryId: ID
}

input CreateCategoryInput {
  # A name for the object.
  name: String
  # An alphanumeric identifier for the object unique to its type.
  slug: String
  # An icon to use for the category
  icon: String
  # A description of the category
  description: String
}

input CreateContentTypeInput {
  # A name for the object.
  name: String
  # An alphanumeric identifier for the object unique to its type.
  slug: String
  # An icon to use for the content type
  icon: String
  # A description of the content type
  description: String
}

input CreateTagInput {
  # The name of the tag
  name: String!
  # Automatically slugified version of the name
  safeName: String
}

input EditArticleInput {
  # The title of the article
  title: String!
  # The slug / normalized article title.
  slug: String!
  # html content of the article
  content: String
  # Raw JSON of the article
  rawContent: JSON
  # Short description of the article
  excerpt: String!
  # True if the article is featured
  featured: Boolean
  # True if the article is published
  published: Boolean!
  # The publishing status of content
  status: CONTENT_STATUS
  # url of the article feature image
  image: URL
  # url of the article hero image
  heroImage: URL
  # Id of the category
  categoryId: ID
}

input EditDetailInput {
  # The id
  id: ID
  # The title text for the menu link
  title: String
  # Lowercase, normalized, name
  safeName: String
  # Custom css classname for the link
  cssClassname: String
  # True if the item has a dropdown
  hasDropdown: Boolean
  # True if the item is a dropdown menu item
  isDropdown: Boolean
  # The display order
  order: Int
  # The link
  href: String
  # Icon kind
  icon: String
}

input EditMediaInput {
  # The file name
  name: String!
  # A description of the file
  fileDescription: String
}

input EditProfileInput {
  # The username for the new user
  username: String
  # The website of the user
  website: URL
  # The first name of the user
  firstName: String
  # The last name associated with the user
  lastName: String
  # Information about the user
  bio: String
  # url of user's avatar picture
  avatarUrl: URL
  # Url for the user's profile background image
  profileImage: URL
  # Location the user lives
  location: String
}

input EditTagInput {
  # The name of the tag
  name: String!
  # Automatically slugified version of the name
  safeName: String
}

type Query {
  # A query for a listing of all accounts
  accounts(
    # The number of accounts to offset
    offset: Int
    # The maximum number of accounts to return at a time.
    limit: Int
  ): [Account]
  # Find an account by the id, username or email
  account(
    # The user ID for the desired account
    id: ID
    # An email address to query for the account
    email: Email
  ): Account
  # Given an auth token, return the user and auth token
  me: Account
  # Returns all articles from the database..
  articles(
    # The number of articles to offset
    offset: Int
    # The maximum number of articles to return at a time.
    limit: Int
  ): [Article]
  # Return all articles matching the given tag.
  getArticlesForTag(name: String, offset: Int, limit: Int): [Article]
  # Return a specific article using its slug
  getArticleBySlug(slug: String): Article
  # A query for a listing of all categories
  categories: [Category]
  # A query for a single category
  category(
    # The id of the requested category
    id: ID!
  ): Category
  # A query for a listing of all content types
  contentTypes: [ContentType]
  # A query for a single content type
  contentType(
    # The id of the requested content type
    id: ID!
  ): ContentType
  allContent: AllContent
  # Returns all content entities from the database..
  entities(
    # The number of entities to offset
    offset: Int
    # The maximum number of entities to return at a time.
    limit: Int
  ): [Entity]
  # A query for a listing of all attachments
  files(
    # The number of attachments to offset
    offset: Int!
    # The maximum number of attachments to return at a time.
    limit: Int!
  ): [File]
  # A query for a listing of all media
  getMedia(
    # The number of media to offset
    offset: Int
    # The maximum number of media to return at a time.
    limit: Int
  ): [Media]
  # A query for a returning a single media by its id
  getMediaById(
    # The id of the requested media
    id: ID!
  ): Media
  # A query for a specific menu
  getMenuById(id: ID!): Menu
  # A query returning all links
  details: [MenuDetail]
  # A query for a listing of all pages
  pages: [Page]
  # A query for a single page
  singlePage(slug: String): Page
  # A query for admin to find a user by their id
  profile(
    # The id of the profile to query
    id: ID
    # The id of the account the profile belongs to.
    accountId: ID
    # The username of the profile to find
    username: String
  ): Profile
  # A query for a listing of all roles
  roles: [Role]
  # A query for a listing of all settings
  settings: [Setting]
  # A query for a listing of all tags
  getTags(
    # The number of tags to offset
    offset: Int!
    # The maximum number of tags to return at a time.
    limit: Int!
  ): [Tag]
}

type RootMutation {
  # Authenticates a user and returns a signed JWT.
  loginAccount(input: AuthInput!): AccountLoginResponse
  # Register a new account.
  signupAccount(input: AuthInput!): Account
  # Adds a new article to the database.
  createArticle(input: CreateArticleInput!): Article
  # Edit an existing article
  editArticle(
    # The article ID
    id: ID!
    # The required fields for creating an article.
    input: EditArticleInput!
  ): Article
  # Remove an article from the database
  deleteArticle(
    # The article ID
    id: ID!
  ): Boolean
  # Adds a new category to the database.
  createCategory(input: CreateCategoryInput!): Category
  # Adds a new content type to the database.
  createContentType(input: CreateContentTypeInput!): ContentType
  # Upload a new media file and store in the database.
  singleUpload(
    # The file to upload
    file: Upload!
  ): File
  # Upload a new media file and store in the database.
  multipleUpload(
    # The file to upload
    files: [Upload]
  ): [File]
  # Upload a new media file and store in the database.
  uploadMedia(
    # The file to upload
    file: UploadMediaInput!
  ): File
  # Edit an existing media file
  editMedia(
    # The media ID
    id: ID!
    # The required fields for editing a media file.
    input: EditMediaInput!
  ): Media
  # Remove a media file from the server
  deleteMedia(
    # The media ID
    id: ID!
  ): Boolean
  # Edit menu details
  editDetails(
    # The detail ID
    id: ID!
    # The required fields for editing a detail.
    input: EditDetailInput!
  ): MenuDetail
  # Edit an existing user
  editProfile(
    # The profile id
    id: ID!
    # Fields available for editing a profile.
    input: EditProfileInput!
  ): Profile
  # Modify the value of the site setting
  editSetting(id: ID!, input: SettingInput!): Setting
  # creating a new tag
  addTag(input: CreateTagInput!): Tag
  # Edit an existing tag
  editTag(
    # The tag ID
    id: ID!
    # The fields (name, description) for editing a tag.
    input: EditTagInput!
  ): Tag
  # Remove a tag from the database
  deleteTag(
    # The tag ID
    id: ID!
  ): Boolean
}
