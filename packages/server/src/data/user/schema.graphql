# The user
type User {
  # Unique identifier for the object.
  id: ID!
  # The timestamp when the object was deleted
  deletedAt: DateTime
  # The timestamp when the object was last updated
  updatedAt: DateTime
  # The timestamp when the object was created
  createdAt: DateTime
  # The user email
  email: Email!
  # The username of the user
  username: String
  # true if email is verified, false otherwise
  verified: Boolean
  # The website of the user
  website: URL
  # The first name of the user
  firstName: String
  # The last name associated with the user
  lastName: String
  # Information about the user
  bio: String
  # url of user's avatar picture
  avatarUrl: URL
  # Url for the user's profile background image
  profileImage: URL
  # Location the user lives
  location: String
  # Language the user prefers
  language: String
  # When the user was born
  birthday: DateTime
  # When the user last logged in.
  lastLogin: DateTime
  # Roles the user belongs to.
  roles: [Role]
  # Social media profiles of the user.
  socialMedia: Social
  # Articles the user has written
  articles: [Article]
  # Articles the user has written
  uploads: [Media]
  # Account verification token belonging to the user.
  verificationToken: VerificationToken
  # Password reset token belonging to the user.
  resetToken: ResetToken
}

# Social media accounts belonging to the user
type Social {
  # Unique identifier for the object.
  id: ID!
  # The unique identifier for the user for the identity.
  userId: ID!
  # The Facebook profile url for the user.
  facebookUrl: URL
  # The Twitter profile url for the user.
  twitterUrl: URL
  # The Google profile url for the user.
  googleUrl: URL
  # The GitHub profile url for the user.
  githubUrl: URL
  # The LinkedIn profile url for the user.
  linkedinUrl: URL
  # The Stackoverflow profile url for the user.
  stackoverflowUrl: URL
}

# Verification token for a user
type VerificationToken {
  # Unique identifier for the object.
  id: ID!
  # The ip address of the person performing the reset
  ip: String
  # The reset token
  token: String
  # True if the token has been used before.
  used: Boolean
  # The IP address of the blocked user
  userId: ID
  # The timestamp when the object was last updated
  updatedAt: DateTime
  # The timestamp when the object was created
  createdAt: DateTime
}

# Reset password token.
type ResetToken {
  # Unique identifier for the object.
  id: ID!

  # The ip address of the person performing the reset
  ip: String

  # The reset token
  token: String

  # True if the token has been used before.
  used: Boolean

  # The IP address of the blocked user
  userId: ID

  # The timestamp when the object was last updated
  updatedAt: DateTime

  # The timestamp when the object was created
  createdAt: DateTime
}

# Payload sent on successful login
type UserLoginResponse {
  # The JSONWebToken for the user.
  token: String
  # The user who logged in.
  user: User
  # Any auth related errors.
  errors: [Error]
}

type Error {
  # HTTP status code
  code: Int

  # The error message
  message: String
}

# Input used for login.
input UserLoginInput {
  # The email address of the account to login to.
  email: Email!
  # The password belonging to the account.
  password: String!
}

# Input required to signup for an account.
input UserSignupInput {
  # The email address of the account to login to.
  email: Email!
  # The password belonging to the account.
  password: String!
  # The username for the new user
  username: String!
  # The first name of the user.
  firstName: String!
  # The last name of the user.
  lastName: String!
}

# Input for editing a user
input EditUserInput {
  # The email address of the account to login to.
  email: Email

  # Where the user is from.
  location: String

  # Information about the user.
  bio: String

  # The username for the new user
  username: String

  # The first name of the user.
  firstName: String

  # The last name of the user.
  lastName: String
}

extend type Query {
  users: [User]
  user(id: ID!): User
  getUserByUsername: User
  currentUser: User
  me: User
}

extend type Mutation {
  # Login to account
  loginUser(input: UserLoginInput!): UserLoginResponse
  # Signup for an account
  signupUser(input: UserSignupInput!): User
}
